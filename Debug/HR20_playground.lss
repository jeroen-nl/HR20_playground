
HR20_playground.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  000003a8  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000302  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000238  00000000  00000000  0000073a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000268  00000000  00000000  00000972  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f5  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000bd  00000000  00000000  00000e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a3 30       	cpi	r26, 0x03	; 3
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	0e 94 57 00 	call	0xae	; 0xae <main>
  7c:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set input and output configuration
void init(void)
{
    // set prescaler = 8, Inter RC 8Mhz / 8 = 1Mhz
    CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	80 93 61 00 	sts	0x0061, r24

	
	//! Disable Analog Comparator (power save)
	ACSR = (1<<ACD);
  8a:	80 e8       	ldi	r24, 0x80	; 128
  8c:	80 bf       	out	0x30, r24	; 48

	//! Disable Digital input on PF0-7 (power save)
	DIDR0 = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 93 7e 00 	sts	0x007E, r24

	//! digital I/O port direction
	DDRG = (1<<PG3)|(1<<PG4); // PG3, PG4 Motor out
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	83 bb       	out	0x13, r24	; 19

	//! enable pullup on all inputs (keys and m_wheel)
	//! ATTENTION: PB0 & PB6 is input, but we will select it only for read
	PORTB = (0<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(0<<PB6);
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<PB0)|(1<<PB4)|(1<<PB7)|(1<<PB6); // PB4, PB7 Motor out
  9c:	81 ed       	ldi	r24, 0xD1	; 209
  9e:	84 b9       	out	0x04, r24	; 4
	//HR20 without RFM
	DDRE = (1<<PE3)|(1<<PE1);  // PE3  activate lighteye and PE1 for TX RS232
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	8d b9       	out	0x0d, r24	; 13
	
	//PORTE = (1<<PE1)|(1<<PE0); //  TXD | RXD(pullup);

	DDRF = (1<<PF3);          // PF3  activate tempsensor
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	80 bb       	out	0x10, r24	; 16
	PORTF = 0xf3;
  a8:	83 ef       	ldi	r24, 0xF3	; 243
  aa:	81 bb       	out	0x11, r24	; 17
  ac:	08 95       	ret

000000ae <main>:


int main(void)
{
	
init();
  ae:	0e 94 42 00 	call	0x84	; 0x84 <init>
  //! activate PCINT0 + PCINT1
  EIMSK = (1<<PCIE1)|(1<<PCIE0);
  b2:	80 ec       	ldi	r24, 0xC0	; 192
  b4:	8d bb       	out	0x1d, r24	; 29
  PORTE |= (1<<PE3);
  b6:	73 9a       	sbi	0x0e, 3	; 14
  init_uart(9600,0);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	95 e2       	ldi	r25, 0x25	; 37
  be:	0e 94 8f 00 	call	0x11e	; 0x11e <init_uart>
  data =0x65;
  c2:	85 e6       	ldi	r24, 0x65	; 101
  c4:	80 93 00 01 	sts	0x0100, r24
  count =0;
  c8:	10 92 02 01 	sts	0x0102, r1
  cc:	10 92 01 01 	sts	0x0101, r1
//sei(); 

while (1)
{
PORTB  |= (0<<PB4)|(1<<PB7);
  d0:	2f 9a       	sbi	0x05, 7	; 5
PORTG  |= (0<<PG3)|(1<<PG4);
  d2:	a4 9a       	sbi	0x14, 4	; 20
com_send(data);
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	0e 94 ce 00 	call	0x19c	; 0x19c <com_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f e9       	ldi	r18, 0x9F	; 159
  de:	86 e8       	ldi	r24, 0x86	; 134
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x34>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x3e>
  ec:	00 00       	nop
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <main+0x22>

000000f0 <__vector_2>:
}

}

ISR(PCINT0_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	count++;
  fe:	80 91 01 01 	lds	r24, 0x0101
 102:	90 91 02 01 	lds	r25, 0x0102
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 02 01 	sts	0x0102, r25
 10c:	80 93 01 01 	sts	0x0101, r24


}
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <init_uart>:
*
*   Purpose :       Initialize the USART
*
*****************************************************************************/
void init_uart (int Baudrate, char AsyncDoubleSpeed)
{
 11e:	cf 93       	push	r28
 120:	c6 2f       	mov	r28, r22
	// Set baud rate
	uint16_t UBBR_val = lrint ((F_CPU / (16L * Baudrate)) - 1);
 122:	aa 27       	eor	r26, r26
 124:	97 fd       	sbrc	r25, 7
 126:	a0 95       	com	r26
 128:	ba 2f       	mov	r27, r26
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	aa 1f       	adc	r26, r26
 130:	bb 1f       	adc	r27, r27
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	aa 1f       	adc	r26, r26
 138:	bb 1f       	adc	r27, r27
 13a:	9c 01       	movw	r18, r24
 13c:	ad 01       	movw	r20, r26
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	44 1f       	adc	r20, r20
 144:	55 1f       	adc	r21, r21
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	44 1f       	adc	r20, r20
 14c:	55 1f       	adc	r21, r21
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	79 e0       	ldi	r23, 0x09	; 9
 152:	8d e3       	ldi	r24, 0x3D	; 61
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 76 01 	call	0x2ec	; 0x2ec <__udivmodsi4>
 15a:	ca 01       	movw	r24, r20
 15c:	b9 01       	movw	r22, r18
 15e:	61 50       	subi	r22, 0x01	; 1
 160:	71 09       	sbc	r23, r1
 162:	81 09       	sbc	r24, r1
 164:	91 09       	sbc	r25, r1
 166:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__floatunsisf>
 16a:	0e 94 13 01 	call	0x226	; 0x226 <lrint>
	UBRR0H = (unsigned char)(UBBR_val>>8);
 16e:	27 2f       	mov	r18, r23
 170:	33 27       	eor	r19, r19
 172:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)UBBR_val;
 176:	60 93 c4 00 	sts	0x00C4, r22
	// Enable double speed mode if requested
	if (AsyncDoubleSpeed == 1) UCSR0A = (1<<U2X0);
 17a:	c1 30       	cpi	r28, 0x01	; 1
 17c:	19 f4       	brne	.+6      	; 0x184 <init_uart+0x66>
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	80 93 c0 00 	sts	0x00C0, r24
	//Set frame format: 8data, 1stop bit, set parity to even.
	UCSR0C |= (1<<USBS0)|(2<<UCSZ00)|(1<<UPM01);
 184:	e2 ec       	ldi	r30, 0xC2	; 194
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	8c 62       	ori	r24, 0x2C	; 44
 18c:	80 83       	st	Z, r24
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 18e:	88 e1       	ldi	r24, 0x18	; 24
 190:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UPM00);
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	80 83       	st	Z, r24
}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <com_send>:
*****************************************************************************/
void com_send( unsigned char data)
{
	
	//Wait until the Transmitter is ready
	while (! (UCSR0A & (1 << UDRE0)) );
 19c:	e0 ec       	ldi	r30, 0xC0	; 192
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	90 81       	ld	r25, Z
 1a2:	95 ff       	sbrs	r25, 5
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <com_send+0x4>
	//Get that data outa here!
	UDR0 = data;
 1a6:	80 93 c6 00 	sts	0x00C6, r24
 1aa:	08 95       	ret

000001ac <__floatunsisf>:
 1ac:	e8 94       	clt
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <__floatsisf+0x12>

000001b0 <__floatsisf>:
 1b0:	97 fb       	bst	r25, 7
 1b2:	3e f4       	brtc	.+14     	; 0x1c2 <__floatsisf+0x12>
 1b4:	90 95       	com	r25
 1b6:	80 95       	com	r24
 1b8:	70 95       	com	r23
 1ba:	61 95       	neg	r22
 1bc:	7f 4f       	sbci	r23, 0xFF	; 255
 1be:	8f 4f       	sbci	r24, 0xFF	; 255
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	99 23       	and	r25, r25
 1c4:	a9 f0       	breq	.+42     	; 0x1f0 <__floatsisf+0x40>
 1c6:	f9 2f       	mov	r31, r25
 1c8:	96 e9       	ldi	r25, 0x96	; 150
 1ca:	bb 27       	eor	r27, r27
 1cc:	93 95       	inc	r25
 1ce:	f6 95       	lsr	r31
 1d0:	87 95       	ror	r24
 1d2:	77 95       	ror	r23
 1d4:	67 95       	ror	r22
 1d6:	b7 95       	ror	r27
 1d8:	f1 11       	cpse	r31, r1
 1da:	f8 cf       	rjmp	.-16     	; 0x1cc <__floatsisf+0x1c>
 1dc:	fa f4       	brpl	.+62     	; 0x21c <__floatsisf+0x6c>
 1de:	bb 0f       	add	r27, r27
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <__floatsisf+0x36>
 1e2:	60 ff       	sbrs	r22, 0
 1e4:	1b c0       	rjmp	.+54     	; 0x21c <__floatsisf+0x6c>
 1e6:	6f 5f       	subi	r22, 0xFF	; 255
 1e8:	7f 4f       	sbci	r23, 0xFF	; 255
 1ea:	8f 4f       	sbci	r24, 0xFF	; 255
 1ec:	9f 4f       	sbci	r25, 0xFF	; 255
 1ee:	16 c0       	rjmp	.+44     	; 0x21c <__floatsisf+0x6c>
 1f0:	88 23       	and	r24, r24
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <__floatsisf+0x48>
 1f4:	96 e9       	ldi	r25, 0x96	; 150
 1f6:	11 c0       	rjmp	.+34     	; 0x21a <__floatsisf+0x6a>
 1f8:	77 23       	and	r23, r23
 1fa:	21 f0       	breq	.+8      	; 0x204 <__floatsisf+0x54>
 1fc:	9e e8       	ldi	r25, 0x8E	; 142
 1fe:	87 2f       	mov	r24, r23
 200:	76 2f       	mov	r23, r22
 202:	05 c0       	rjmp	.+10     	; 0x20e <__floatsisf+0x5e>
 204:	66 23       	and	r22, r22
 206:	71 f0       	breq	.+28     	; 0x224 <__floatsisf+0x74>
 208:	96 e8       	ldi	r25, 0x86	; 134
 20a:	86 2f       	mov	r24, r22
 20c:	70 e0       	ldi	r23, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	2a f0       	brmi	.+10     	; 0x21c <__floatsisf+0x6c>
 212:	9a 95       	dec	r25
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	88 1f       	adc	r24, r24
 21a:	da f7       	brpl	.-10     	; 0x212 <__floatsisf+0x62>
 21c:	88 0f       	add	r24, r24
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	97 f9       	bld	r25, 7
 224:	08 95       	ret

00000226 <lrint>:
 226:	41 d0       	rcall	.+130    	; 0x2aa <__fp_splitA>
 228:	a8 f1       	brcs	.+106    	; 0x294 <lrint+0x6e>
 22a:	9e 57       	subi	r25, 0x7E	; 126
 22c:	a8 f1       	brcs	.+106    	; 0x298 <lrint+0x72>
 22e:	98 51       	subi	r25, 0x18	; 24
 230:	60 f0       	brcs	.+24     	; 0x24a <lrint+0x24>
 232:	39 f1       	breq	.+78     	; 0x282 <lrint+0x5c>
 234:	98 30       	cpi	r25, 0x08	; 8
 236:	70 f5       	brcc	.+92     	; 0x294 <lrint+0x6e>
 238:	09 2e       	mov	r0, r25
 23a:	99 27       	eor	r25, r25
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	88 1f       	adc	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	d1 f7       	brne	.-12     	; 0x23c <lrint+0x16>
 248:	1c c0       	rjmp	.+56     	; 0x282 <lrint+0x5c>
 24a:	bb 27       	eor	r27, r27
 24c:	99 3f       	cpi	r25, 0xF9	; 249
 24e:	4c f4       	brge	.+18     	; 0x262 <lrint+0x3c>
 250:	b1 11       	cpse	r27, r1
 252:	b1 e0       	ldi	r27, 0x01	; 1
 254:	b6 2b       	or	r27, r22
 256:	67 2f       	mov	r22, r23
 258:	78 2f       	mov	r23, r24
 25a:	88 27       	eor	r24, r24
 25c:	98 5f       	subi	r25, 0xF8	; 248
 25e:	b1 f7       	brne	.-20     	; 0x24c <lrint+0x26>
 260:	08 c0       	rjmp	.+16     	; 0x272 <lrint+0x4c>
 262:	86 95       	lsr	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b7 95       	ror	r27
 26a:	08 f4       	brcc	.+2      	; 0x26e <lrint+0x48>
 26c:	b1 60       	ori	r27, 0x01	; 1
 26e:	93 95       	inc	r25
 270:	c1 f7       	brne	.-16     	; 0x262 <lrint+0x3c>
 272:	bb 0f       	add	r27, r27
 274:	30 f4       	brcc	.+12     	; 0x282 <lrint+0x5c>
 276:	11 f4       	brne	.+4      	; 0x27c <lrint+0x56>
 278:	60 ff       	sbrs	r22, 0
 27a:	03 c0       	rjmp	.+6      	; 0x282 <lrint+0x5c>
 27c:	6f 5f       	subi	r22, 0xFF	; 255
 27e:	7f 4f       	sbci	r23, 0xFF	; 255
 280:	8f 4f       	sbci	r24, 0xFF	; 255
 282:	3e f4       	brtc	.+14     	; 0x292 <lrint+0x6c>
 284:	90 95       	com	r25
 286:	80 95       	com	r24
 288:	70 95       	com	r23
 28a:	61 95       	neg	r22
 28c:	7f 4f       	sbci	r23, 0xFF	; 255
 28e:	8f 4f       	sbci	r24, 0xFF	; 255
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	08 95       	ret
 294:	68 94       	set
 296:	24 c0       	rjmp	.+72     	; 0x2e0 <__fp_szero>
 298:	22 c0       	rjmp	.+68     	; 0x2de <__fp_zero>

0000029a <__fp_split3>:
 29a:	57 fd       	sbrc	r21, 7
 29c:	90 58       	subi	r25, 0x80	; 128
 29e:	44 0f       	add	r20, r20
 2a0:	55 1f       	adc	r21, r21
 2a2:	59 f0       	breq	.+22     	; 0x2ba <__fp_splitA+0x10>
 2a4:	5f 3f       	cpi	r21, 0xFF	; 255
 2a6:	71 f0       	breq	.+28     	; 0x2c4 <__fp_splitA+0x1a>
 2a8:	47 95       	ror	r20

000002aa <__fp_splitA>:
 2aa:	88 0f       	add	r24, r24
 2ac:	97 fb       	bst	r25, 7
 2ae:	99 1f       	adc	r25, r25
 2b0:	61 f0       	breq	.+24     	; 0x2ca <__fp_splitA+0x20>
 2b2:	9f 3f       	cpi	r25, 0xFF	; 255
 2b4:	79 f0       	breq	.+30     	; 0x2d4 <__fp_splitA+0x2a>
 2b6:	87 95       	ror	r24
 2b8:	08 95       	ret
 2ba:	12 16       	cp	r1, r18
 2bc:	13 06       	cpc	r1, r19
 2be:	14 06       	cpc	r1, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	f2 cf       	rjmp	.-28     	; 0x2a8 <__fp_split3+0xe>
 2c4:	46 95       	lsr	r20
 2c6:	f1 df       	rcall	.-30     	; 0x2aa <__fp_splitA>
 2c8:	08 c0       	rjmp	.+16     	; 0x2da <__fp_splitA+0x30>
 2ca:	16 16       	cp	r1, r22
 2cc:	17 06       	cpc	r1, r23
 2ce:	18 06       	cpc	r1, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	f1 cf       	rjmp	.-30     	; 0x2b6 <__fp_splitA+0xc>
 2d4:	86 95       	lsr	r24
 2d6:	71 05       	cpc	r23, r1
 2d8:	61 05       	cpc	r22, r1
 2da:	08 94       	sec
 2dc:	08 95       	ret

000002de <__fp_zero>:
 2de:	e8 94       	clt

000002e0 <__fp_szero>:
 2e0:	bb 27       	eor	r27, r27
 2e2:	66 27       	eor	r22, r22
 2e4:	77 27       	eor	r23, r23
 2e6:	cb 01       	movw	r24, r22
 2e8:	97 f9       	bld	r25, 7
 2ea:	08 95       	ret

000002ec <__udivmodsi4>:
 2ec:	a1 e2       	ldi	r26, 0x21	; 33
 2ee:	1a 2e       	mov	r1, r26
 2f0:	aa 1b       	sub	r26, r26
 2f2:	bb 1b       	sub	r27, r27
 2f4:	fd 01       	movw	r30, r26
 2f6:	0d c0       	rjmp	.+26     	; 0x312 <__udivmodsi4_ep>

000002f8 <__udivmodsi4_loop>:
 2f8:	aa 1f       	adc	r26, r26
 2fa:	bb 1f       	adc	r27, r27
 2fc:	ee 1f       	adc	r30, r30
 2fe:	ff 1f       	adc	r31, r31
 300:	a2 17       	cp	r26, r18
 302:	b3 07       	cpc	r27, r19
 304:	e4 07       	cpc	r30, r20
 306:	f5 07       	cpc	r31, r21
 308:	20 f0       	brcs	.+8      	; 0x312 <__udivmodsi4_ep>
 30a:	a2 1b       	sub	r26, r18
 30c:	b3 0b       	sbc	r27, r19
 30e:	e4 0b       	sbc	r30, r20
 310:	f5 0b       	sbc	r31, r21

00000312 <__udivmodsi4_ep>:
 312:	66 1f       	adc	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	1a 94       	dec	r1
 31c:	69 f7       	brne	.-38     	; 0x2f8 <__udivmodsi4_loop>
 31e:	60 95       	com	r22
 320:	70 95       	com	r23
 322:	80 95       	com	r24
 324:	90 95       	com	r25
 326:	9b 01       	movw	r18, r22
 328:	ac 01       	movw	r20, r24
 32a:	bd 01       	movw	r22, r26
 32c:	cf 01       	movw	r24, r30
 32e:	08 95       	ret

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
