
HR20_playground.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000396  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800100  00800100  0000040a  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000040a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000080  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003dc  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002b0  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000034e  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000d4  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000207  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000158  00000000  00000000  0000116f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  000012c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_2>
   c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
  68:	21 e0       	ldi	r18, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a3 30       	cpi	r26, 0x03	; 3
  74:	b2 07       	cpc	r27, r18
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	0e 94 57 00 	call	0xae	; 0xae <main>
  7c:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set input and output configuration
void init(void)
{
    // set prescaler = 8, Inter RC 8Mhz / 8 = 1Mhz
    CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	80 93 61 00 	sts	0x0061, r24

	
	//! Disable Analog Comparator (power save)
	ACSR = (1<<ACD);
  8a:	80 e8       	ldi	r24, 0x80	; 128
  8c:	80 bf       	out	0x30, r24	; 48

	//! Disable Digital input on PF0-7 (power save)
	DIDR0 = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	80 93 7e 00 	sts	0x007E, r24

	//! digital I/O port direction
	DDRG = (1<<PG3)|(1<<PG4); // PG3, PG4 Motor out
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	83 bb       	out	0x13, r24	; 19

	//! enable pullup on all inputs (keys and m_wheel)
	//! ATTENTION: PB0 & PB6 is input, but we will select it only for read
	PORTB = (0<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(0<<PB6);
  98:	8e e0       	ldi	r24, 0x0E	; 14
  9a:	85 b9       	out	0x05, r24	; 5
	DDRB = (1<<PB0)|(1<<PB4)|(1<<PB7)|(1<<PB6); // PB4, PB7 Motor out
  9c:	81 ed       	ldi	r24, 0xD1	; 209
  9e:	84 b9       	out	0x04, r24	; 4
	//HR20 without RFM
	DDRE = (1<<PE3)|(1<<PE1);  // PE3  activate lighteye and PE1 for TX RS232
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	8d b9       	out	0x0d, r24	; 13
	
	//PORTE = (1<<PE1)|(1<<PE0); //  TXD | RXD(pullup);

	DDRF = (1<<PF3);          // PF3  activate tempsensor
  a4:	88 e0       	ldi	r24, 0x08	; 8
  a6:	80 bb       	out	0x10, r24	; 16
	PORTF = 0xf3;
  a8:	83 ef       	ldi	r24, 0xF3	; 243
  aa:	81 bb       	out	0x11, r24	; 17
  ac:	08 95       	ret

000000ae <main>:


int main(void)
{
	
init();
  ae:	0e 94 42 00 	call	0x84	; 0x84 <init>
  //! activate PCINT0 + PCINT1
  EIMSK = (1<<PCIE1)|(1<<PCIE0);
  b2:	80 ec       	ldi	r24, 0xC0	; 192
  b4:	8d bb       	out	0x1d, r24	; 29
  PORTE |= (1<<PE3);
  b6:	73 9a       	sbi	0x0e, 3	; 14
  init_uart(9600,0);
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	95 e2       	ldi	r25, 0x25	; 37
  be:	0e 94 c0 00 	call	0x180	; 0x180 <init_uart>
  data =0x65;
  c2:	85 e6       	ldi	r24, 0x65	; 101
  c4:	80 93 00 01 	sts	0x0100, r24
  count =0;
  c8:	10 92 02 01 	sts	0x0102, r1
  cc:	10 92 01 01 	sts	0x0101, r1
//sei(); 

while (1)
{
PORTB  |= (0<<PB4)|(1<<PB7);
  d0:	2f 9a       	sbi	0x05, 7	; 5
PORTG  |= (0<<PG3)|(1<<PG4);
  d2:	a4 9a       	sbi	0x14, 4	; 20
com_send(data);
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <com_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f e9       	ldi	r18, 0x9F	; 159
  de:	86 e8       	ldi	r24, 0x86	; 134
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x34>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x3e>
  ec:	00 00       	nop
_delay_ms(500);
calibrate_rco();
  ee:	0e 94 91 00 	call	0x122	; 0x122 <calibrate_rco>
  f2:	ee cf       	rjmp	.-36     	; 0xd0 <main+0x22>

000000f4 <__vector_2>:
}

}

ISR(PCINT0_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
	count++;
 102:	80 91 01 01 	lds	r24, 0x0101
 106:	90 91 02 01 	lds	r25, 0x0102
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 02 01 	sts	0x0102, r25
 110:	80 93 01 01 	sts	0x0101, r24


}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <calibrate_rco>:
#define F_CPU 1000000UL
#endif


void calibrate_rco(void)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
    // Computes countVal for use in the calibration
    static const uint16_t countVal = (EXTERNAL_TICKS * F_CPU) / (XTAL_FREQUENCY * LOOP_CYCLES);

    cli();
 126:	f8 94       	cli
    
    // Set up timer to be ASYNCHRONOUS from the CPU clock with a second
    // EXTERNAL 32,768kHz CRYSTAL driving it. No prescaling on asynchronous timer.
    ASSR = (1 << AS2);
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	80 93 b6 00 	sts	0x00B6, r24
    TCCR2A = (1 << CS20);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 b0 00 	sts	0x00B0, r24
 134:	30 e8       	ldi	r19, 0x80	; 128
    // Calibrate using 128(0x80) calibration cycles
    uint8_t cycles = 0x80;
    uint16_t count;
    do {
        count = 0;
        TCNT2 = 0x00;       // Reset async timer/counter
 136:	e2 eb       	ldi	r30, 0xB2	; 178
 138:	f0 e0       	ldi	r31, 0x00	; 0

        // Wait until async timer is updated  (Async Status reg. busy flags).
        while (ASSR & ((1 << OCR2UB) | (1 << TCN2UB) | (1 << TCR2UB)));
 13a:	a6 eb       	ldi	r26, 0xB6	; 182
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	40 e0       	ldi	r20, 0x00	; 0
        } while (TCNT2 < EXTERNAL_TICKS);

        if (count > countVal)
            OSCCAL--;
        else if (count < countVal)
            OSCCAL++;
 142:	c6 e6       	ldi	r28, 0x66	; 102
 144:	d0 e0       	ldi	r29, 0x00	; 0
    // Calibrate using 128(0x80) calibration cycles
    uint8_t cycles = 0x80;
    uint16_t count;
    do {
        count = 0;
        TCNT2 = 0x00;       // Reset async timer/counter
 146:	10 82       	st	Z, r1

        // Wait until async timer is updated  (Async Status reg. busy flags).
        while (ASSR & ((1 << OCR2UB) | (1 << TCN2UB) | (1 << TCR2UB)));
 148:	8c 91       	ld	r24, X
 14a:	87 70       	andi	r24, 0x07	; 7
 14c:	e9 f7       	brne	.-6      	; 0x148 <calibrate_rco+0x26>
 14e:	85 2f       	mov	r24, r21
 150:	94 2f       	mov	r25, r20

        // this loop needs to take exactly LOOP_CYCLES CPU cycles!
        // make sure your compiler does not mess with it!
        do {
            count++;
 152:	01 96       	adiw	r24, 0x01	; 1
        } while (TCNT2 < EXTERNAL_TICKS);
 154:	20 81       	ld	r18, Z
 156:	28 3c       	cpi	r18, 0xC8	; 200
 158:	e0 f3       	brcs	.-8      	; 0x152 <calibrate_rco+0x30>

        if (count > countVal)
 15a:	88 36       	cpi	r24, 0x68	; 104
 15c:	23 e0       	ldi	r18, 0x03	; 3
 15e:	92 07       	cpc	r25, r18
 160:	20 f0       	brcs	.+8      	; 0x16a <calibrate_rco+0x48>
            OSCCAL--;
 162:	88 81       	ld	r24, Y
 164:	81 50       	subi	r24, 0x01	; 1
 166:	88 83       	st	Y, r24
 168:	06 c0       	rjmp	.+12     	; 0x176 <calibrate_rco+0x54>
        else if (count < countVal)
 16a:	87 36       	cpi	r24, 0x67	; 103
 16c:	93 40       	sbci	r25, 0x03	; 3
 16e:	28 f4       	brcc	.+10     	; 0x17a <calibrate_rco+0x58>
            OSCCAL++;
 170:	88 81       	ld	r24, Y
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	88 83       	st	Y, r24
 176:	31 50       	subi	r19, 0x01	; 1
        else
            break; //cycles=0xFF;
    } while (--cycles);
 178:	31 f7       	brne	.-52     	; 0x146 <calibrate_rco+0x24>
}
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <init_uart>:
*
*   Purpose :       Initialize the USART
*
*****************************************************************************/
void init_uart (int Baudrate, char AsyncDoubleSpeed)
{
 180:	cf 93       	push	r28
 182:	c6 2f       	mov	r28, r22
	// Set baud rate
	uint16_t UBBR_val = lrint ((F_CPU / (16L * Baudrate)) - 1);
 184:	aa 27       	eor	r26, r26
 186:	97 fd       	sbrc	r25, 7
 188:	a0 95       	com	r26
 18a:	ba 2f       	mov	r27, r26
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	aa 1f       	adc	r26, r26
 192:	bb 1f       	adc	r27, r27
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	aa 1f       	adc	r26, r26
 19a:	bb 1f       	adc	r27, r27
 19c:	9c 01       	movw	r18, r24
 19e:	ad 01       	movw	r20, r26
 1a0:	22 0f       	add	r18, r18
 1a2:	33 1f       	adc	r19, r19
 1a4:	44 1f       	adc	r20, r20
 1a6:	55 1f       	adc	r21, r21
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	44 1f       	adc	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	79 e0       	ldi	r23, 0x09	; 9
 1b4:	8d e3       	ldi	r24, 0x3D	; 61
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 a7 01 	call	0x34e	; 0x34e <__udivmodsi4>
 1bc:	ca 01       	movw	r24, r20
 1be:	b9 01       	movw	r22, r18
 1c0:	61 50       	subi	r22, 0x01	; 1
 1c2:	71 09       	sbc	r23, r1
 1c4:	81 09       	sbc	r24, r1
 1c6:	91 09       	sbc	r25, r1
 1c8:	0e 94 07 01 	call	0x20e	; 0x20e <__floatunsisf>
 1cc:	0e 94 44 01 	call	0x288	; 0x288 <lrint>
	UBRR0H = (unsigned char)(UBBR_val>>8);
 1d0:	27 2f       	mov	r18, r23
 1d2:	33 27       	eor	r19, r19
 1d4:	20 93 c5 00 	sts	0x00C5, r18
	UBRR0L = (unsigned char)UBBR_val;
 1d8:	60 93 c4 00 	sts	0x00C4, r22
	// Enable double speed mode if requested
	if (AsyncDoubleSpeed == 1) UCSR0A = (1<<U2X0);
 1dc:	c1 30       	cpi	r28, 0x01	; 1
 1de:	19 f4       	brne	.+6      	; 0x1e6 <init_uart+0x66>
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	80 93 c0 00 	sts	0x00C0, r24
	//Set frame format: 8data, 1stop bit, set parity to even.
	UCSR0C |= (1<<USBS0)|(2<<UCSZ00)|(1<<UPM01);
 1e6:	e2 ec       	ldi	r30, 0xC2	; 194
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	8c 62       	ori	r24, 0x2C	; 44
 1ee:	80 83       	st	Z, r24
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1f0:	88 e1       	ldi	r24, 0x18	; 24
 1f2:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UPM00);
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	80 83       	st	Z, r24
}
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <com_send>:
*****************************************************************************/
void com_send( unsigned char data)
{
	
	//Wait until the Transmitter is ready
	while (! (UCSR0A & (1 << UDRE0)) );
 1fe:	e0 ec       	ldi	r30, 0xC0	; 192
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	90 81       	ld	r25, Z
 204:	95 ff       	sbrs	r25, 5
 206:	fd cf       	rjmp	.-6      	; 0x202 <com_send+0x4>
	//Get that data outa here!
	UDR0 = data;
 208:	80 93 c6 00 	sts	0x00C6, r24
 20c:	08 95       	ret

0000020e <__floatunsisf>:
 20e:	e8 94       	clt
 210:	09 c0       	rjmp	.+18     	; 0x224 <__floatsisf+0x12>

00000212 <__floatsisf>:
 212:	97 fb       	bst	r25, 7
 214:	3e f4       	brtc	.+14     	; 0x224 <__floatsisf+0x12>
 216:	90 95       	com	r25
 218:	80 95       	com	r24
 21a:	70 95       	com	r23
 21c:	61 95       	neg	r22
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	8f 4f       	sbci	r24, 0xFF	; 255
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	99 23       	and	r25, r25
 226:	a9 f0       	breq	.+42     	; 0x252 <__floatsisf+0x40>
 228:	f9 2f       	mov	r31, r25
 22a:	96 e9       	ldi	r25, 0x96	; 150
 22c:	bb 27       	eor	r27, r27
 22e:	93 95       	inc	r25
 230:	f6 95       	lsr	r31
 232:	87 95       	ror	r24
 234:	77 95       	ror	r23
 236:	67 95       	ror	r22
 238:	b7 95       	ror	r27
 23a:	f1 11       	cpse	r31, r1
 23c:	f8 cf       	rjmp	.-16     	; 0x22e <__floatsisf+0x1c>
 23e:	fa f4       	brpl	.+62     	; 0x27e <__floatsisf+0x6c>
 240:	bb 0f       	add	r27, r27
 242:	11 f4       	brne	.+4      	; 0x248 <__floatsisf+0x36>
 244:	60 ff       	sbrs	r22, 0
 246:	1b c0       	rjmp	.+54     	; 0x27e <__floatsisf+0x6c>
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	8f 4f       	sbci	r24, 0xFF	; 255
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	16 c0       	rjmp	.+44     	; 0x27e <__floatsisf+0x6c>
 252:	88 23       	and	r24, r24
 254:	11 f0       	breq	.+4      	; 0x25a <__floatsisf+0x48>
 256:	96 e9       	ldi	r25, 0x96	; 150
 258:	11 c0       	rjmp	.+34     	; 0x27c <__floatsisf+0x6a>
 25a:	77 23       	and	r23, r23
 25c:	21 f0       	breq	.+8      	; 0x266 <__floatsisf+0x54>
 25e:	9e e8       	ldi	r25, 0x8E	; 142
 260:	87 2f       	mov	r24, r23
 262:	76 2f       	mov	r23, r22
 264:	05 c0       	rjmp	.+10     	; 0x270 <__floatsisf+0x5e>
 266:	66 23       	and	r22, r22
 268:	71 f0       	breq	.+28     	; 0x286 <__floatsisf+0x74>
 26a:	96 e8       	ldi	r25, 0x86	; 134
 26c:	86 2f       	mov	r24, r22
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	2a f0       	brmi	.+10     	; 0x27e <__floatsisf+0x6c>
 274:	9a 95       	dec	r25
 276:	66 0f       	add	r22, r22
 278:	77 1f       	adc	r23, r23
 27a:	88 1f       	adc	r24, r24
 27c:	da f7       	brpl	.-10     	; 0x274 <__floatsisf+0x62>
 27e:	88 0f       	add	r24, r24
 280:	96 95       	lsr	r25
 282:	87 95       	ror	r24
 284:	97 f9       	bld	r25, 7
 286:	08 95       	ret

00000288 <lrint>:
 288:	41 d0       	rcall	.+130    	; 0x30c <__fp_splitA>
 28a:	a8 f1       	brcs	.+106    	; 0x2f6 <lrint+0x6e>
 28c:	9e 57       	subi	r25, 0x7E	; 126
 28e:	a8 f1       	brcs	.+106    	; 0x2fa <lrint+0x72>
 290:	98 51       	subi	r25, 0x18	; 24
 292:	60 f0       	brcs	.+24     	; 0x2ac <lrint+0x24>
 294:	39 f1       	breq	.+78     	; 0x2e4 <lrint+0x5c>
 296:	98 30       	cpi	r25, 0x08	; 8
 298:	70 f5       	brcc	.+92     	; 0x2f6 <lrint+0x6e>
 29a:	09 2e       	mov	r0, r25
 29c:	99 27       	eor	r25, r25
 29e:	66 0f       	add	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	0a 94       	dec	r0
 2a8:	d1 f7       	brne	.-12     	; 0x29e <lrint+0x16>
 2aa:	1c c0       	rjmp	.+56     	; 0x2e4 <lrint+0x5c>
 2ac:	bb 27       	eor	r27, r27
 2ae:	99 3f       	cpi	r25, 0xF9	; 249
 2b0:	4c f4       	brge	.+18     	; 0x2c4 <lrint+0x3c>
 2b2:	b1 11       	cpse	r27, r1
 2b4:	b1 e0       	ldi	r27, 0x01	; 1
 2b6:	b6 2b       	or	r27, r22
 2b8:	67 2f       	mov	r22, r23
 2ba:	78 2f       	mov	r23, r24
 2bc:	88 27       	eor	r24, r24
 2be:	98 5f       	subi	r25, 0xF8	; 248
 2c0:	b1 f7       	brne	.-20     	; 0x2ae <lrint+0x26>
 2c2:	08 c0       	rjmp	.+16     	; 0x2d4 <lrint+0x4c>
 2c4:	86 95       	lsr	r24
 2c6:	77 95       	ror	r23
 2c8:	67 95       	ror	r22
 2ca:	b7 95       	ror	r27
 2cc:	08 f4       	brcc	.+2      	; 0x2d0 <lrint+0x48>
 2ce:	b1 60       	ori	r27, 0x01	; 1
 2d0:	93 95       	inc	r25
 2d2:	c1 f7       	brne	.-16     	; 0x2c4 <lrint+0x3c>
 2d4:	bb 0f       	add	r27, r27
 2d6:	30 f4       	brcc	.+12     	; 0x2e4 <lrint+0x5c>
 2d8:	11 f4       	brne	.+4      	; 0x2de <lrint+0x56>
 2da:	60 ff       	sbrs	r22, 0
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <lrint+0x5c>
 2de:	6f 5f       	subi	r22, 0xFF	; 255
 2e0:	7f 4f       	sbci	r23, 0xFF	; 255
 2e2:	8f 4f       	sbci	r24, 0xFF	; 255
 2e4:	3e f4       	brtc	.+14     	; 0x2f4 <lrint+0x6c>
 2e6:	90 95       	com	r25
 2e8:	80 95       	com	r24
 2ea:	70 95       	com	r23
 2ec:	61 95       	neg	r22
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	8f 4f       	sbci	r24, 0xFF	; 255
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	08 95       	ret
 2f6:	68 94       	set
 2f8:	24 c0       	rjmp	.+72     	; 0x342 <__fp_szero>
 2fa:	22 c0       	rjmp	.+68     	; 0x340 <__fp_zero>

000002fc <__fp_split3>:
 2fc:	57 fd       	sbrc	r21, 7
 2fe:	90 58       	subi	r25, 0x80	; 128
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	59 f0       	breq	.+22     	; 0x31c <__fp_splitA+0x10>
 306:	5f 3f       	cpi	r21, 0xFF	; 255
 308:	71 f0       	breq	.+28     	; 0x326 <__fp_splitA+0x1a>
 30a:	47 95       	ror	r20

0000030c <__fp_splitA>:
 30c:	88 0f       	add	r24, r24
 30e:	97 fb       	bst	r25, 7
 310:	99 1f       	adc	r25, r25
 312:	61 f0       	breq	.+24     	; 0x32c <__fp_splitA+0x20>
 314:	9f 3f       	cpi	r25, 0xFF	; 255
 316:	79 f0       	breq	.+30     	; 0x336 <__fp_splitA+0x2a>
 318:	87 95       	ror	r24
 31a:	08 95       	ret
 31c:	12 16       	cp	r1, r18
 31e:	13 06       	cpc	r1, r19
 320:	14 06       	cpc	r1, r20
 322:	55 1f       	adc	r21, r21
 324:	f2 cf       	rjmp	.-28     	; 0x30a <__fp_split3+0xe>
 326:	46 95       	lsr	r20
 328:	f1 df       	rcall	.-30     	; 0x30c <__fp_splitA>
 32a:	08 c0       	rjmp	.+16     	; 0x33c <__fp_splitA+0x30>
 32c:	16 16       	cp	r1, r22
 32e:	17 06       	cpc	r1, r23
 330:	18 06       	cpc	r1, r24
 332:	99 1f       	adc	r25, r25
 334:	f1 cf       	rjmp	.-30     	; 0x318 <__fp_splitA+0xc>
 336:	86 95       	lsr	r24
 338:	71 05       	cpc	r23, r1
 33a:	61 05       	cpc	r22, r1
 33c:	08 94       	sec
 33e:	08 95       	ret

00000340 <__fp_zero>:
 340:	e8 94       	clt

00000342 <__fp_szero>:
 342:	bb 27       	eor	r27, r27
 344:	66 27       	eor	r22, r22
 346:	77 27       	eor	r23, r23
 348:	cb 01       	movw	r24, r22
 34a:	97 f9       	bld	r25, 7
 34c:	08 95       	ret

0000034e <__udivmodsi4>:
 34e:	a1 e2       	ldi	r26, 0x21	; 33
 350:	1a 2e       	mov	r1, r26
 352:	aa 1b       	sub	r26, r26
 354:	bb 1b       	sub	r27, r27
 356:	fd 01       	movw	r30, r26
 358:	0d c0       	rjmp	.+26     	; 0x374 <__udivmodsi4_ep>

0000035a <__udivmodsi4_loop>:
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	ee 1f       	adc	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	a2 17       	cp	r26, r18
 364:	b3 07       	cpc	r27, r19
 366:	e4 07       	cpc	r30, r20
 368:	f5 07       	cpc	r31, r21
 36a:	20 f0       	brcs	.+8      	; 0x374 <__udivmodsi4_ep>
 36c:	a2 1b       	sub	r26, r18
 36e:	b3 0b       	sbc	r27, r19
 370:	e4 0b       	sbc	r30, r20
 372:	f5 0b       	sbc	r31, r21

00000374 <__udivmodsi4_ep>:
 374:	66 1f       	adc	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	1a 94       	dec	r1
 37e:	69 f7       	brne	.-38     	; 0x35a <__udivmodsi4_loop>
 380:	60 95       	com	r22
 382:	70 95       	com	r23
 384:	80 95       	com	r24
 386:	90 95       	com	r25
 388:	9b 01       	movw	r18, r22
 38a:	ac 01       	movw	r20, r24
 38c:	bd 01       	movw	r22, r26
 38e:	cf 01       	movw	r24, r30
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
